[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "index",
    "section": "",
    "text": "##Introduction",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>index</span>"
    ]
  },
  {
    "objectID": "Prac_day_1.html",
    "href": "Prac_day_1.html",
    "title": "2  Prac_day_1",
    "section": "",
    "text": "##SetUp\n\nraw_data &lt;- airquality\n\n##Cleaned Data\n\ncleaned_data &lt;- na.omit(raw_data)\ntmp &lt;- cleaned_data[[4]]\ntmp\n\n  [1] 67 72 74 62 65 59 61 69 66 68 58 64 66 57 68 62 59 73 61 61 67 81 79 76 82\n [26] 90 87 82 77 72 65 73 76 84 85 81 83 83 88 92 92 89 73 81 80 81 82 84 87 85\n [51] 74 86 85 82 86 88 86 83 81 81 81 82 89 90 90 86 82 80 77 79 76 78 78 77 72\n [76] 79 81 86 97 94 96 94 91 92 93 93 87 84 80 78 75 73 81 76 77 71 71 78 67 76\n[101] 68 82 64 71 81 69 63 70 75 76 68\n\nozn &lt;- cleaned_data[[1]] \nozn\n\n  [1]  41  36  12  18  23  19   8  16  11  14  18  14  34   6  30  11   1  11\n [19]   4  32  23  45 115  37  29  71  39  23  21  37  20  12  13 135  49  32\n [37]  64  40  77  97  97  85  10  27   7  48  35  61  79  63  16  80 108  20\n [55]  52  82  50  64  59  39   9  16 122  89 110  44  28  65  22  59  23  31\n [73]  44  21   9  45 168  73  76 118  84  85  96  78  73  91  47  32  20  23\n [91]  21  24  44  21  28   9  13  46  18  13  24  16  13  23  36   7  14  30\n[109]  14  18  20\n\n\n##Temperature\n\nmean_tmp &lt;- mean(tmp)\nmean_tmp \n\n[1] 77.79279\n\nsd_tmp &lt;- sd(tmp)\nsd_tmp \n\n[1] 9.529969\n\nmin_tmp &lt;- min(tmp)\nmin_tmp\n\n[1] 57\n\nmax_tmp&lt;-max(tmp) \nmax_tmp\n\n[1] 97\n\n\n##Ozone level\n\nmean_ozn &lt;- mean(ozn)\nmean_ozn \n\n[1] 42.0991\n\nsd_ozn &lt;- sd(ozn)\nsd_ozn \n\n[1] 33.27597\n\nmin_ozn &lt;- min(ozn)\nmin_ozn \n\n[1] 1\n\nmax_ozn &lt;- max(ozn) \nmax_ozn\n\n[1] 168\n\n\n##Linear Regression\n##SetUp\n\ndata(cars) \nspeed &lt;- cars$speed\ndist &lt;- cars$dist\n\n##Design Matrix and response variable\n\nX &lt;- cbind(1,speed) \nY&lt;-dist\n\n##Beta Estimate\n\nXtrans &lt;- t(X) \nXtransX &lt;- Xtrans %*% X \nXtransX_inv &lt;- solve(XtransX) \nXtransY &lt;- Xtrans %*% Y \nbeta_estimate &lt;- XtransX_inv %*% XtransY\nbeta_estimate\n\n            [,1]\n      -17.579095\nspeed   3.932409\n\n\n##Linear Model\n\nmodel &lt;- lm(dist ~ speed, data=cars) \nsummary(model)\n\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-29.069  -9.525  -2.272   9.215  43.201 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -17.5791     6.7584  -2.601   0.0123 *  \nspeed         3.9324     0.4155   9.464 1.49e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.38 on 48 degrees of freedom\nMultiple R-squared:  0.6511,    Adjusted R-squared:  0.6438 \nF-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Prac_day_1</span>"
    ]
  },
  {
    "objectID": "Practical_Day_four.html",
    "href": "Practical_Day_four.html",
    "title": "3  Practical Day four",
    "section": "",
    "text": "##SetUp\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(nycflights13)\n\n##1. Flights dataset\n\nflights_tibble &lt;- as_tibble(flights)\nflights_tibble\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n##2. dplyr and the pipe\n\ndist_tbl &lt;- flights |&gt; filter(month==1) |&gt; group_by(carrier) |&gt; summarise(mean_distance = mean(distance, na.rm = TRUE),\n    sd_distance = sd(distance, na.rm = TRUE))  |&gt; arrange(mean_distance)\n\ndist_tbl\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0  \n\n\n##3. **Zero** standard deviation and **NA** standard deviation\n\nIf a carrier has only **one observation**, the standard deviation formula divides by ( n - 1). Since (n = 1) we get **division by zero**, which results in `NA`.\n\nna_summaries &lt;- flights |&gt; filter(month ==1 ,carrier=='OO') |&gt; summarise( Number_of_flights = n(),\n    mean_dist = mean(distance, na.rm = TRUE),\n    sd_dist = sd(distance, na.rm = TRUE))\nna_summaries\n\n# A tibble: 1 × 3\n  Number_of_flights mean_dist sd_dist\n              &lt;int&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1                 1       733      NA\n\n\nIf all values in a dataset are identical, their standard deviation is 0 because there is no variation.\n\n\nYV &lt;- flights |&gt; filter(month ==1 , carrier=='YV') |&gt; select(flight, distance) \n\nprint(YV, n = Inf)\n\n# A tibble: 46 × 2\n   flight distance\n    &lt;int&gt;    &lt;dbl&gt;\n 1   3750      229\n 2   3771      229\n 3   3750      229\n 4   3771      229\n 5   3771      229\n 6   3750      229\n 7   3771      229\n 8   3750      229\n 9   3771      229\n10   3750      229\n11   3771      229\n12   3750      229\n13   3771      229\n14   3771      229\n15   3750      229\n16   3771      229\n17   3750      229\n18   3771      229\n19   3750      229\n20   3771      229\n21   3750      229\n22   3771      229\n23   3771      229\n24   3750      229\n25   3750      229\n26   3771      229\n27   3771      229\n28   3750      229\n29   3771      229\n30   3750      229\n31   3771      229\n32   3750      229\n33   3771      229\n34   3750      229\n35   3771      229\n36   3771      229\n37   3750      229\n38   3771      229\n39   3750      229\n40   3771      229\n41   3750      229\n42   3771      229\n43   3750      229\n44   3771      229\n45   3771      229\n46   3750      229\n\nz_summaries &lt;- YV|&gt; summarise( Number_of_flights = n(),\n    mean_d= mean(distance, na.rm = TRUE),\n    sd_d= sd(distance, na.rm = TRUE))\nz_summaries\n\n# A tibble: 1 × 3\n  Number_of_flights mean_d  sd_d\n              &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1                46    229     0\n\n\n##4.\n\ncarrier_delay_df &lt;- flights |&gt; \n  group_by(month, carrier) |&gt; \n  summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE), .groups = \"drop\") |&gt; \n  pivot_wider(names_from = carrier, values_from = avg_dep_delay)\n\n\ncarrier_delay_df\n\n# A tibble: 12 × 17\n   month  `9E`    AA     AS    B6    DL    EV    F9    FL    HA    MQ    OO\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1 16.9   6.93  7.35   9.49  3.85 24.2  10     1.97 54.4   6.49 67   \n 2     2 16.5   8.28  0.722 13.8   5.54 21.5  29.8   5.18 17.4   8.09 NA   \n 3     3 13.4   8.70  8.42  14.2   9.93 26.2  16.8  17.3   1.16  7.19 NA   \n 4     4 13.6  11.7  11.3   15.2   8.17 22.8  24.6  13.1  -2.1  13.7  NA   \n 5     5 22.7   9.66  6.77   9.78  9.74 20.2  35.9  19.2  -1.45 13.9  NA   \n 6     6 29.0  14.6  13.1   20.4  18.7  25.5  29.4  38.8   1.47 20.8  61   \n 7     7 31.4  12.1   2.42  24.9  20.6  26.5  31.8  41.2  -1.71 20.7  NA   \n 8     8 17.3   7.17  2.87  15.7   9.85 16.3  22.2  23.4   1.68 10.1  64   \n 9     9  7.75  5.69 -4.52   6.63  5.53  8.24  8.26 16.9  -5.44  5.35 -4.94\n10    10  9.33  3.00  0.677  2.96  3.42 13.4   9.70 13.7  -5.10  4.48 NA   \n11    11  7.56  3.10  3.08   3.52  2.85  9.83 13.5  16.9  -5.44  3.28  0.8 \n12    12 19.8  11.7  18.0   17.0  10.8  27.9  13.1  26.1  -3.14 12.7  NA   \n# ℹ 5 more variables: UA &lt;dbl&gt;, US &lt;dbl&gt;, VX &lt;dbl&gt;, WN &lt;dbl&gt;, YV &lt;dbl&gt;\n\n\n##5. Proportion of flights that were delayed but arrived before time\n\nproportion_delayed_but_on_time &lt;- flights |&gt; \n  filter(dep_delay &gt; 0, arr_delay &lt;= 0) |&gt; \n  summarise(proportion = n() / nrow(flights))\n\nproportion_delayed_but_on_time\n\n# A tibble: 1 × 1\n  proportion\n       &lt;dbl&gt;\n1      0.105\n\n\n##airlines and flights data set\n\n\n#Step 1:\nroutes_multiple_airlines &lt;- flights |&gt;\n  group_by(origin, dest)|&gt;\n  filter(n_distinct(carrier) &gt; 1) |&gt;\n  ungroup()\n\nroutes_multiple_airlines\n\n# A tibble: 276,735 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      542            540         2      923            850\n 2  2013     1     1      554            600        -6      812            837\n 3  2013     1     1      554            558        -4      740            728\n 4  2013     1     1      555            600        -5      913            854\n 5  2013     1     1      557            600        -3      709            723\n 6  2013     1     1      557            600        -3      838            846\n 7  2013     1     1      558            600        -2      753            745\n 8  2013     1     1      558            600        -2      853            856\n 9  2013     1     1      558            600        -2      924            917\n10  2013     1     1      558            600        -2      923            937\n# ℹ 276,725 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n#Step 2:\nroute_delays &lt;- routes_multiple_airlines |&gt;\n  group_by(origin, dest, carrier) |&gt;\n  summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE), .groups = \"drop\")\n\nroute_delays\n\n# A tibble: 343 × 4\n   origin dest  carrier avg_arr_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 EWR    ATL   9E              -6.25\n 2 EWR    ATL   DL              10.0 \n 3 EWR    ATL   EV              19.5 \n 4 EWR    ATL   UA              10.5 \n 5 EWR    AUS   UA               4.28\n 6 EWR    AUS   WN             -11.2 \n 7 EWR    BDL   EV               6.78\n 8 EWR    BDL   UA              22.6 \n 9 EWR    BNA   EV              17.7 \n10 EWR    BNA   WN              -2.13\n# ℹ 333 more rows\n\n#Step 3:\n\nroute_performance &lt;- route_delays |&gt;\n  group_by(origin, dest) |&gt;\n  summarise(\n    worst_airline = carrier[which.max(avg_arr_delay)],\n    worst_delay = max(avg_arr_delay),\n    best_airline = carrier[which.min(avg_arr_delay)],\n    best_delay = min(avg_arr_delay),\n    .groups = \"drop\"\n  )\n\nroute_performance\n\n# A tibble: 128 × 6\n   origin dest  worst_airline worst_delay best_airline best_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n 1 EWR    ATL   EV                  19.5  9E               -6.25 \n 2 EWR    AUS   UA                   4.28 WN              -11.2  \n 3 EWR    BDL   UA                  22.6  EV                6.78 \n 4 EWR    BNA   EV                  17.7  WN               -2.13 \n 5 EWR    BOS   B6                   6.87 EV               -4.01 \n 6 EWR    BWI   EV                  20.1  WN                5.95 \n 7 EWR    CHS   EV                  16.2  UA              -14    \n 8 EWR    CLE   UA                   5.97 EV               -3.71 \n 9 EWR    CLT   EV                  20.5  US                0.920\n10 EWR    CVG   EV                  21.2  9E                1.40 \n# ℹ 118 more rows\n\n#Step 4:\n\nroute_performance &lt;- route_performance |&gt;\n  mutate(delay_difference = worst_delay - best_delay)\n\nroute_with_max_difference &lt;- route_performance |&gt;\n  filter(delay_difference == max(delay_difference))\n\nroute_with_max_difference\n\n# A tibble: 0 × 7\n# ℹ 7 variables: origin &lt;chr&gt;, dest &lt;chr&gt;, worst_airline &lt;chr&gt;,\n#   worst_delay &lt;dbl&gt;, best_airline &lt;chr&gt;, best_delay &lt;dbl&gt;,\n#   delay_difference &lt;dbl&gt;\n\n\n##7\n\npersonal_details &lt;- structure(list(id = c(\"id_1\", \"id_2\", \"id_3\", \"id_4\", \"id_5\", \n\"id_6\", \"id_7\", \"id_8\", \"id_9\", \"id_10\", \"id_11\", \"id_12\", \"id_13\", \n\"id_14\", \"id_15\", \"id_16\", \"id_17\", \"id_18\", \"id_19\", \"id_20\", \n\"id_21\", \"id_22\", \"id_23\", \"id_24\", \"id_25\", \"id_26\", \"id_27\", \n\"id_28\", \"id_29\", \"id_30\", \"id_31\", \"id_32\", \"id_33\", \"id_34\", \n\"id_35\", \"id_36\", \"id_37\", \"id_38\", \"id_39\", \"id_40\", \"id_41\", \n\"id_42\", \"id_43\", \"id_44\", \"id_45\", \"id_46\", \"id_47\", \"id_48\", \n\"id_49\", \"id_50\"), age = c(50L, 34L, 70L, 33L, 22L, 61L, 69L, \n73L, 62L, 56L, 71L, 33L, 73L, 44L, 45L, 46L, 24L, 70L, 46L, 76L, \n47L, 76L, 28L, 48L, 54L, 27L, 45L, 26L, 61L, 28L, 38L, 55L, 33L, \n36L, 62L, 58L, 72L, 31L, 34L, 51L, 61L, 64L, 26L, 28L, 60L, 29L, \n42L, 46L, 79L, 72L), gender = c(\"male\", \"male\", \"male\", \"female\", \n\"female\", \"male\", \"female\", \"male\", \"male\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"male\", \"male\", \"male\", \"female\", \n\"male\", \"male\", \"male\", \"male\", \"female\", \"femal\", \"male\", \"female\", \n\"female\", \"female\", \"female\", \"male\", \"female\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"female\", \"female\", \"male\", \n\"female\", \"female\", \"male\", \"male\", \"female\", \"male\", \"male\", \n\"male\", \"female\"), height = c(174.4, 197.7, 174.1, 194.5, NA, \n180.4, 170.5, 157.4, 196.8, 165.1, 153, 197.4, 186, 157.1, 177.5, \n197.7, 179.3, 170.2, 182.4, NA, 165.4, 161, 168.5, 199.2, 157.7, \n154.6, 157.1, 184.5, 181, 194.6, 183.6, 186.9, 176.1, 183, 191.1, \n189.3, 199, 172, 165.6, 170.5, 150.5, 159.2, 192.1, 161.6, 162, \n153.8, 162.3, 186.6, 192.4, 174.9), weight = c(69.4, 62.3, 55.6, \n69.5, 78.6, 60.8, 72.2, 60.9, 75.1, 67.7, 82.5, 68.7, 67.8, 76.7, \n87, 61.1, 70.6, 63.3, 81.5, 59.2, 93.2, 87.3, 83.4, 80.9, 68.6, \n76.5, 93.7, 79.1, 92, 65.6, 85.4, 63.3, 79.7, 74.1, 63.3, 78.2, \n95.7, 95.1, 63.7, 66.1, 99.3, 81, 96.9, 73.3, 70.3, 83, 57.6, \n78.6, 61.9, 98.1), blood_type = c(\"O\", \"A\", \"O\", \"O\", \"B\", \"AB\", \n\"O\", \"O\", \"O\", \"AB\", \"A\", \"O\", \"O\", \"O\", \"B\", \"A\", \"B\", \"AB\", \n\"O\", \"AB\", \"A\", \"AB\", \"O\", \"B\", \"A\", \"A\", \"B\", \"AB\", \"A\", \"B\", \n\"B\", \"A\", \"O\", \"O\", \"O\", \"B\", \"O\", \"A\", \"A\", \"B\", \"A\", \"O\", \"AB\", \n\"A\", \"A\", \"O\", \"O\", \"B\", \"A\", \"O\"), disease_status = c(\"diseased\", \n\"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"Healthy\", \"diseased\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"healthy\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"healthy\", \"diseased\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"diseased\", \"diseased\", \"healthy\", \n\"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"diseased\", \"diseased\", \"diseased\", \"healthy\", \"healthy\", \"diseased\", \n\"diseased\"), cholesterol = c(228, 223, 213, 198, 166, 151, 195, \n199, 189, 196, 221, 156, 185, 230, 234, 174, 185, 236, 235, 180, \n165, 220, 160, 153, 250, 153, 184, 242, 212, 179, 224, 233, 181, \n199, 220, 214, 214, 248, 191, 162, 203, 173, 199, 187, 248, 189, \n173, 212, 164, 247), glucose = c(96, 78, 101, 119, 103, 91, 86, \nNA, 77, 80, 115, 85, 88, 109, NA, 71, 90, 94, 91, 87, 113, 93, \n97, 118, 109, 80, 85, 119, 99, 108, 89, 108, 97, 116, 79, 84, \n75, 81, 119, NA, 106, 109, 75, 82, 84, 75, 76, 120, 119, 77), \n    smoker = c(\"yes\", \"yes\", \"yes\", \"yes\", \"no\", \"yes\", \"no\", \n    \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"no\", \n    \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \n    \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\"), exercise = c(\"occasional\", \n    \"regular\", \"occasional\", \"regular\", \"none\", \"occasional\", \n    \"regular\", \"none\", \"occasional\", \"none\", \"occasional\", \"none\", \n    \"none\", \"regular\", \"occasional\", \"none\", \"regular\", \"regular\", \n    \"none\", \"occasional\", \"none\", \"occasional\", \"occasional\", \n    \"occasional\", \"regular\", \"occasional\", \"regular\", \"regular\", \n    \"regular\", \"occasional\", \"occasional\", \"none\", \"none\", \"regular\", \n    \"occasional\", \"occasional\", \"none\", \"none\", \"none\", \"none\", \n    \"occasional\", \"regular\", \"regular\", \"none\", \"regular\", \"occasional\", \n    \"occasional\", \"none\", \"occasional\", \"regular\"), income = c(84820L, \n    81547L, 22588L, 72490L, 74533L, 25338L, 41469L, 57315L, 63629L, \n    88662L, 62615L, 56261L, 58499L, 82232L, 77584L, 77275L, 38468L, \n    54510L, 91326L, 78611L, 31402L, 29586L, 21441L, 58269L, 84173L, \n    88295L, 37940L, 43750L, 69750L, 92356L, 82518L, 91455L, 68866L, \n    51178L, 68275L, 27689L, 35418L, 81318L, 62405L, 86851L, 25654L, \n    47553L, 74474L, 51409L, 22607L, 55360L, 96351L, 21516L, 41927L, \n    55810L), education = c(\"master\", \"bachelor\", \"PhD\", \"master\", \n    \"bachelor\", \"highschool\", \"PhD\", \"highschool\", \"PhD\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"bachelor\", \"PhD\", \"PhD\", \n    \"PhD\", \"bachelor\", \"master\", \"highschool\", \"PhD\", \"highschool\", \n    \"bachelor\", \"master\", \"highschool\", \"highschool\", \"master\", \n    \"master\", \"bachelor\", \"PhD\", \"highschool\", \"PhD\", \"master\", \n    \"master\", \"master\", \"PhD\", \"highschool\", \"master\", \"master\", \n    \"highschool\", \"bachelor\", \"highschool\", \"bachelor\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"highschool\", \"bachelor\", \n    \"bachelor\"), region = c(\"North\", \"South\", \"North\", \"West\", \n    \"North\", \"West\", \"South\", \"South\", \"West\", \"South\", \"West\", \n    \"South\", \"West\", \"East\", \"North\", \"West\", \"North\", \"North\", \n    \"West\", \"North\", \"East\", \"West\", \"South\", \"North\", \"North\", \n    \"East\", \"East\", \"North\", \"North\", \"West\", \"South\", \"West\", \n    \"West\", \"East\", \"West\", \"North\", \"West\", \"North\", \"East\", \n    \"North\", \"West\", \"South\", \"South\", \"East\", \"North\", \"West\", \n    \"West\", \"East\", \"North\", \"East\"), marital_status = c(\"divorced\", \n    \"single\", \"divorced\", \"divorced\", \"divorced\", \"divorced\", \n    \"divorced\", \"married\", \"divorced\", \"married\", \"divorced\", \n    \"widowed\", \"married\", \"single\", \"widowed\", \"widowed\", \"single\", \n    \"divorced\", \"widowed\", \"widowed\", \"single\", \"married\", \"single\", \n    \"married\", \"widowed\", \"married\", \"single\", \"single\", \"widowed\", \n    \"married\", \"widowed\", \"divorced\", \"single\", \"married\", \"single\", \n    \"widowed\", \"widowed\", \"married\", \"widowed\", \"divorced\", \"married\", \n    \"married\", \"divorced\", \"single\", \"married\", \"widowed\", \"divorced\", \n    \"divorced\", \"single\", \"divorced\")), row.names = c(NA, -50L\n), class = c(\"tbl_df\", \"tbl\", \"data.frame\"))\n\n\npersonal_details\n\n# A tibble: 50 × 15\n   id      age gender height weight blood_type disease_status cholesterol\n   &lt;chr&gt; &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;                &lt;dbl&gt;\n 1 id_1     50 male     174.   69.4 O          diseased               228\n 2 id_2     34 male     198.   62.3 A          healthy                223\n 3 id_3     70 male     174.   55.6 O          healthy                213\n 4 id_4     33 female   194.   69.5 O          healthy                198\n 5 id_5     22 female    NA    78.6 B          healthy                166\n 6 id_6     61 male     180.   60.8 AB         healthy                151\n 7 id_7     69 female   170.   72.2 O          diseased               195\n 8 id_8     73 male     157.   60.9 O          healthy                199\n 9 id_9     62 male     197.   75.1 O          diseased               189\n10 id_10    56 female   165.   67.7 AB         Healthy                196\n# ℹ 40 more rows\n# ℹ 7 more variables: glucose &lt;dbl&gt;, smoker &lt;chr&gt;, exercise &lt;chr&gt;,\n#   income &lt;int&gt;, education &lt;chr&gt;, region &lt;chr&gt;, marital_status &lt;chr&gt;\n\n#Identify columns with missing (NA) values\n\nmissing_summary &lt;- personal_details |&gt;\n  summarise(across(everything(), ~ sum(is.na(.)), .names = \"missing_{.col}\"))\n\nmissing_summary\n\n# A tibble: 1 × 15\n  missing_id missing_age missing_gender missing_height missing_weight\n       &lt;int&gt;       &lt;int&gt;          &lt;int&gt;          &lt;int&gt;          &lt;int&gt;\n1          0           0              0              2              0\n# ℹ 10 more variables: missing_blood_type &lt;int&gt;, missing_disease_status &lt;int&gt;,\n#   missing_cholesterol &lt;int&gt;, missing_glucose &lt;int&gt;, missing_smoker &lt;int&gt;,\n#   missing_exercise &lt;int&gt;, missing_income &lt;int&gt;, missing_education &lt;int&gt;,\n#   missing_region &lt;int&gt;, missing_marital_status &lt;int&gt;\n\n#Check for Unexpected Unique Values (Potential Typos)\n\ncategorical_cols &lt;- personal_details |&gt;\n                    select(where(is.character))\n\ntypo_check &lt;- categorical_cols |&gt;\n  summarise(across(everything(), ~ list(unique(.)), .names = \"unique_{.col}\"))\n\ntypo_check\n\n# A tibble: 1 × 9\n  unique_id  unique_gender unique_blood_type unique_disease_status unique_smoker\n  &lt;list&gt;     &lt;list&gt;        &lt;list&gt;            &lt;list&gt;                &lt;list&gt;       \n1 &lt;chr [50]&gt; &lt;chr [3]&gt;     &lt;chr [4]&gt;         &lt;chr [3]&gt;             &lt;chr [2]&gt;    \n# ℹ 4 more variables: unique_exercise &lt;list&gt;, unique_education &lt;list&gt;,\n#   unique_region &lt;list&gt;, unique_marital_status &lt;list&gt;",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Practical Day four</span>"
    ]
  },
  {
    "objectID": "Prac2.html",
    "href": "Prac2.html",
    "title": "4  Prac2",
    "section": "",
    "text": "## Step 1: Generate Simulated Data\n\n# Set the seed for reproducibility\nset.seed(1)\n# Create x as a sequence of numbers from 1 to 100\nx &lt;- seq(1, 100, by = 1)\n# Generate y as a noisy sine wave: y = sin(x * 10) + e, where e ~ N(0, 0.2^2)\ne &lt;- rnorm(length(x), mean = 0, sd = 0.2) # generate noise\ny &lt;- sin(x * 10) + e # noisy sine wave\n\n##Implementation of the Lowess algorithm\n\n\n# Define a function customLowess to implement the LOWESS smoothing\ncustomLowess &lt;- function(x, y, f) {\n  n &lt;- length(x)\n  smoothed_y &lt;- numeric(n)\n  \n  # For each point in x, calculate the weighted local regression\n  for (i in 1:n) {\n    # Calculate distances from current x_i to all other x values\n    distances &lt;- abs(x - x[i])\n    \n    # Calculate the weights using the tricube kernel\n    dmax &lt;- sort(distances)[ceiling(f * n)] # distance to the furthest neighbor\n    weights &lt;- (1 - (distances / dmax)^3)^3\n    weights[distances &gt; dmax] &lt;- 0  # Set weights of far neighbors to 0\n    \n    # Fit the weighted linear regression (y = beta_0 + beta_1 * x)\n    X &lt;- cbind(1, x)  # Add intercept term\n    W &lt;- diag(weights)  # Diagonal matrix of weights\n    beta &lt;- solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% y\n    \n    # Calculate the smoothed value for y_i\n    smoothed_y[i] &lt;- beta[1] + beta[2] * x[i]\n  }\n  \n  return(smoothed_y)\n}\n\n# Apply customLowess to the data\nf &lt;- 0.1\nsmoothed_y_custom &lt;- customLowess(x, y, f)\n\n##Compare the build-in lowess and customized\n\nsmoothed_y_custom\n\n  [1] -0.140811899 -0.089322201 -0.039217369  0.005123515  0.041677766\n  [6]  0.059204545  0.067217158  0.063851423  0.086616672  0.075242495\n [11]  0.035497226  0.005686721 -0.015868899 -0.018105248 -0.026887603\n [16]  0.008053724  0.060588745  0.100169841  0.127170118  0.117185271\n [21]  0.090556469  0.048931751  0.014450189 -0.011517351 -0.063718103\n [26] -0.083302283 -0.074027812 -0.039062229 -0.013016181 -0.001296421\n [31]  0.027106983  0.025376398  0.003572246 -0.029623326 -0.060501331\n [36] -0.045768225 -0.027541266  0.005283842  0.033884883  0.051033760\n [41]  0.070627294  0.046833663  0.018599518  0.002520147  0.005737783\n [46]  0.018569273  0.016253319  0.037550184  0.049623096  0.046890130\n [51]  0.034253969  0.025515611  0.054072951  0.057965659  0.052849548\n [56]  0.058011042  0.061404778  0.086164339  0.075913489  0.078478904\n [61]  0.093568561  0.089731618  0.070618276  0.015368628 -0.014656889\n [66] -0.013384787  0.014852616  0.058856694  0.077225884  0.097127994\n [71]  0.083974539  0.033606390 -0.012633109 -0.060771900 -0.066655224\n [76] -0.068530312 -0.065362136 -0.052177542 -0.047897183 -0.029732582\n [81] -0.035513062 -0.031705952 -0.011749709  0.013399260  0.039937884\n [86]  0.038858146  0.047581814  0.055897150  0.055557085  0.074446067\n [91]  0.087865584  0.125578391  0.144518988  0.132746278  0.101497496\n [96]  0.031089259  0.019455256  0.022151264  0.024523365  0.031613551\n\n# Use the built-in lowess function to smooth the data\nsmoothed_y_builtin &lt;- lowess(x, y, f = f, iter = 0)$y\nsmoothed_y_builtin\n\n  [1] -0.140811899 -0.089322201 -0.039217369  0.005123515  0.041677766\n  [6]  0.059204545  0.067217158  0.063851423  0.086616672  0.075242495\n [11]  0.035497226  0.005686721 -0.015868899 -0.018105248 -0.026887603\n [16]  0.008053724  0.060588745  0.100169841  0.127170118  0.117185271\n [21]  0.090556469  0.048931751  0.014450189 -0.011517351 -0.063718103\n [26] -0.083302283 -0.074027812 -0.039062229 -0.013016181 -0.001296421\n [31]  0.027106983  0.025376398  0.003572246 -0.029623326 -0.060501331\n [36] -0.045768225 -0.027541266  0.005283842  0.033884883  0.051033760\n [41]  0.070627294  0.046833663  0.018599518  0.002520147  0.005737783\n [46]  0.018569273  0.016253319  0.037550184  0.049623096  0.046890130\n [51]  0.034253969  0.025515611  0.054072951  0.057965659  0.052849548\n [56]  0.058011042  0.061404778  0.086164339  0.075913489  0.078478904\n [61]  0.093568561  0.089731618  0.070618276  0.015368628 -0.014656889\n [66] -0.013384787  0.014852616  0.058856694  0.077225884  0.097127994\n [71]  0.083974539  0.033606390 -0.012633109 -0.060771900 -0.066655224\n [76] -0.068530312 -0.065362136 -0.052177542 -0.047897183 -0.029732582\n [81] -0.035513062 -0.031705952 -0.011749709  0.013399260  0.039937884\n [86]  0.038858146  0.047581814  0.055897150  0.055557085  0.074446067\n [91]  0.087865584  0.125578391  0.144518988  0.132746278  0.101497496\n [96]  0.031089259  0.019455256  0.022151264  0.024523365  0.031613551\n\n# Plot both smoothed curves to compare\nplot(x, y, main = \"Lowess Smoothing Comparison\", xlab = \"x\", ylab = \"y\", pch = 16, col = rgb(0, 0, 0, 0.5))\nlines(x, smoothed_y_custom, col = \"blue\", lwd = 2)  \nlines(x, smoothed_y_builtin, col = \"red\", lwd = 2)   \nlegend(\"topright\", legend = c(\"Custom LOWESS\", \"Built-in LOWESS\"), col = c(\"blue\", \"red\"), lwd = 2)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Prac2</span>"
    ]
  }
]